"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7688],{8486:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>g,contentTitle:()=>l,default:()=>c,frontMatter:()=>p,metadata:()=>i,toc:()=>o});var s=n(8168),t=(n(6540),n(5680)),m=n(2317),r=n.n(m);const p={title:"Datatypes",sidebar_position:5},l=void 0,i={unversionedId:"theories/Datatypes",id:"theories/Datatypes",title:"Datatypes",description:"Algebraic datatypes, known from programming languages such as ML, offer a convenient way for specifying common data structures. Records and tuples are special cases of algebraic datatypes, and so are scalars (enumeration types). But algebraic datatypes are more general. They can be used to specify finite lists, trees and other recursive structures.",source:"@site/docs-smtlib/02 - theories/05 - Datatypes.md",sourceDirName:"02 - theories",slug:"/theories/Datatypes",permalink:"/z3guide/docs/theories/Datatypes",draft:!1,editUrl:"https://github.com/microsoft/z3guide/tree/main/website/docs-smtlib/02 - theories/05 - Datatypes.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Datatypes",sidebar_position:5},sidebar:"smtlibSidebar",previous:{title:"Arrays",permalink:"/z3guide/docs/theories/Arrays"},next:{title:"Strings",permalink:"/z3guide/docs/theories/Strings"}},g={},o=[{value:"Records",id:"records",level:3},{value:"Record Updates",id:"record-updates",level:3},{value:"Scalars (enumeration types)",id:"scalars-enumeration-types",level:3},{value:"Recursive datatypes",id:"recursive-datatypes",level:3},{value:"Mutually recursive datatypes",id:"mutually-recursive-datatypes",level:3},{value:"Z3 will not prove inductive facts",id:"z3-will-not-prove-inductive-facts",level:3},{value:"Nested datatypes with Arrays and Sequences",id:"nested-datatypes-with-arrays-and-sequences",level:3},{value:"Using Datatypes for solving type constraints",id:"using-datatypes-for-solving-type-constraints",level:2},{value:"Checking if terms have principal types",id:"checking-if-terms-have-principal-types",level:4},{value:"Using UNSAT cores to identify mutually inconsistent type constraints",id:"using-unsat-cores-to-identify-mutually-inconsistent-type-constraints",level:3},{value:"Using optimization to localize type errors",id:"using-optimization-to-localize-type-errors",level:3}],y={toc:o},N="wrapper";function c(a){let{components:e,...n}=a;return(0,t.yg)(N,(0,s.A)({},y,n,{components:e,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"Algebraic datatypes, known from programming languages such as ML, offer a convenient way for specifying common data structures. Records and tuples are special cases of algebraic datatypes, and so are scalars (enumeration types). But algebraic datatypes are more general. They can be used to specify finite lists, trees and other recursive structures."),(0,t.yg)("h3",{id:"records"},"Records"),(0,t.yg)("p",null,"A record is specified as a datatype with a single constructor and as many arguments as record elements. The number of arguments to a record are always the same. The type system does not allow to extend records and there is no record subtyping."),(0,t.yg)("p",null,"The following example illustrates that two records are equal only if all the arguments are equal. It introduces the parametric type Pair, with constructor mk-pair and two arguments that can be accessed using the selector functions first and second."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(declare-datatypes (T1 T2) ((Pair (mk-pair (first T1) (second T2)))))\n(declare-const p1 (Pair Int Int))\n(declare-const p2 (Pair Int Int))\n(assert (= p1 p2))\n(assert (< (second p1) 20))\n(check-sat)\n(get-model)\n(assert (not (= (first p1) (first p2))))\n(check-sat)",result:{output:"sat\n(\n  (define-fun p2 () (Pair Int Int)\n    (mk-pair 0 19))\n  (define-fun p1 () (Pair Int Int)\n    (mk-pair 0 19))\n)\nunsat\n",error:"",status:"z3-ran",hash:"1158221f1865c9d072fed54e5e5d2457e1a763a9"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h3",{id:"record-updates"},"Record Updates"),(0,t.yg)("p",null,"You can create variants of records by updating selected fields."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(declare-datatypes (T1 T2) ((Pair (mk-pair (first T1) (second T2)))))\n(declare-const p1 (Pair Int Int))\n(declare-const p2 (Pair Int Int))\n(assert (not (= p1 p2)))\n(assert (= p1 ((_ update-field first) p2 1)))\n(check-sat)\n(get-model)",result:{output:"sat\n(\n  (define-fun p2 () (Pair Int Int)\n    (mk-pair 2 3))\n  (define-fun p1 () (Pair Int Int)\n    (mk-pair 1 3))\n)\n",error:"",status:"z3-ran",hash:"e3c62e0af5a7999fe6ff653d3f947e983a1c213b"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h3",{id:"scalars-enumeration-types"},"Scalars (enumeration types)"),(0,t.yg)("p",null,"A scalar sort is a finite domain sort. The elements of the finite domain are enumerated as distinct constants. For example, the sort S is a scalar type with three values A, B and C. It is possible for three constants of sort S to be distinct, but not for four constants."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(declare-datatypes () ((S A B C)))\n(declare-const x S)\n(declare-const y S)\n(declare-const z S)\n(declare-const u S)\n(assert (distinct x y z))\n(check-sat)\n(assert (distinct x y z u))\n(check-sat)",result:{output:"sat\nunsat\n",error:"",status:"z3-ran",hash:"a788e2348e47f042d3bcc308a009902a4b45157d"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h3",{id:"recursive-datatypes"},"Recursive datatypes"),(0,t.yg)("p",null,"A recursive datatype declaration includes itself directly (or indirectly) as a component. A standard example of a recursive data-type is the one of lists. A parametric list can be specified in Z3 as"),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(declare-datatypes (T) ((Lst nil (cons (hd T) (tl Lst)))))\n(declare-const l1 (Lst Int))\n(declare-const l2 (Lst Bool))",result:{output:"",error:"",status:"z3-ran",hash:"867a153dea27c625c5b857d0e86a488e10653e66"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("p",null,"The List recursive datatype is builtin in Z3. The empty list is nil, and the constructor insert is used to build new lists. The accessors head and tail are defined as usual."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(declare-const l1 (List Int))\n(declare-const l2 (List Int))\n(declare-const l3 (List Int))\n(declare-const x Int)\n(assert (not (= l1 nil)))\n(assert (not (= l2 nil)))\n(assert (= (head l1) (head l2)))\n(assert (not (= l1 l2)))\n(assert (= l3 (insert x l2)))\n(assert (< x 100))\n(check-sat)\n(get-model)\n(assert (= (tail l1) (tail l2)))\n(check-sat)",result:{output:"sat\n(\n  (define-fun l1 () (List Int)\n    (insert 2 nil))\n  (define-fun x () Int\n    99)\n  (define-fun l2 () (List Int)\n    (insert 2 (insert 3 nil)))\n  (define-fun l3 () (List Int)\n    (insert 99 (insert 2 (insert 3 nil))))\n)\nunsat\n",error:"",status:"z3-ran",hash:"75fd8affa26822db05bcb71b6c0d8439629312e4"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("p",null,"In the example above, we also assert that l1 and l2 are not nil. This is because the interpretation of head and tail is under-specified on nil. So then head and tail would not be able to distinguish nil from (insert (head nil) (tail nil))."),(0,t.yg)("h3",{id:"mutually-recursive-datatypes"},"Mutually recursive datatypes"),(0,t.yg)("p",null,"You can also specify mutually recursive datatypes for Z3. We list one example below."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"; declare a mutually recursive parametric datatype\n(declare-datatypes (T) ((Tree leaf (node (value T) (children TreeList)))\n                        (TreeList nil (cons (car Tree) (cdr TreeList)))))\n(declare-const t1 (Tree Int))\n(declare-const t2 (Tree Bool))\n; we must use the 'as' construct to distinguish the leaf (Tree Int) from leaf (Tree Bool)\n(assert (not (= t1 (as leaf (Tree Int)))))\n(assert (< (value t1) 20))\n(assert (not (is-leaf t2)))\n(assert (not (value t2)))\n(check-sat)\n(get-model)",result:{output:"sat\n(\n  (define-fun t1 () (Tree Int)\n    (node 0 (as nil (TreeList Int))))\n  (define-fun t2 () (Tree Bool)\n    (node false (as nil (TreeList Bool))))\n)\n",error:"",status:"z3-ran",hash:"1addb0a1a2076beac5633922a257a21f70806d8b"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("p",null,"In the example above, we have a tree of Booleans and a tree of integers. The leaf constant must return a tree of a specific sort. To specify the result sort, we use the qualified identifier (as leaf (Tree Int)). Note that, we do not need to use a qualified identifier for value, since Z3 can infer the intended declaration using the sort of the argument."),(0,t.yg)("h3",{id:"z3-will-not-prove-inductive-facts"},"Z3 will not prove inductive facts"),(0,t.yg)("p",null,"The ground decision procedures for recursive datatypes don't lift to establishing inductive facts. Z3 does not contain methods for producing proofs by induction. This may change in the future. In particular, consider the following example where the function p is true on all natural numbers, which can be proved by induction over Nat. Z3 enters a matching loop as it attempts instantiating the universally quantified implication."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(set-option :timeout 2000)\n(declare-datatypes () ((Nat zero (succ (pred Nat)))))\n(declare-fun p (Nat) Bool)\n(assert (p zero))\n(assert (forall ((x Nat)) (implies (p (pred x)) (p x))))\n(assert (not (forall ((x Nat)) (p x))))\n(check-sat)\n(get-info :all-statistics)",result:{output:"unknown\n(:added-eqs               20252\n :binary-propagations     1\n :conflicts               2893\n :datatype-accessor-ax    2894\n :datatype-constructor-ax 5786\n :datatype-occurs-check   5788\n :datatype-splits         2894\n :decisions               2893\n :final-checks            2894\n :max-generation          1\n :max-memory              18.76\n :memory                  12.11\n :mk-bool-var             8684\n :mk-clause-binary        1\n :num-allocs              115737\n :num-checks              1\n :propagations            1\n :quant-instantiations    2893\n :rlimit-count            205828\n :time                    2.26)\n",error:"",status:"z3-ran",hash:"47bca1e57b474d4d59b96f32de90925485336b9e"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h3",{id:"nested-datatypes-with-arrays-and-sequences"},"Nested datatypes with Arrays and Sequences"),(0,t.yg)("p",null,"In some applications it is convenient to have a sequence of types that are\nrecursively defined. For example an abstract syntax tree of a program is a sequence of\nbasic statements, and a basic statement can be an assignment or an if-then-else statement,\nwhere the then and else branches are statements. Similarly, it may be convenient to use\na nesting of algebraic data-types and arrays. Z3 supports nesting ADTs over sequences and over\nranges of arrays."),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(declare-sort Expr)\n(declare-sort Var)\n(declare-datatypes ((Stmt 0)) \n  (((Assignment (lval Var) (rval Expr)) \n    (If (cond Expr) (th Stmt) (el Stmt)) \n    (Seq (stmts (Seq Stmt))))))\n\n(declare-const s Stmt)\n(declare-const t Stmt)\n\n(assert ((_ is Seq) t))\n(assert ((_ is Seq) s))\n(assert (= s (seq.nth (stmts t) 2)))\n(assert (>= (seq.len (stmts s)) 5))\n(check-sat)\n(get-model)\n(assert (= s (Seq (seq.unit s))))\n(check-sat)",result:{output:"sat\n(\n  ;; universe for Expr:\n  ;;   Expr!val!7 Expr!val!3 Expr!val!1 Expr!val!4 Expr!val!0 Expr!val!6 Expr!val!5 Expr!val!2 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Expr!val!7 () Expr)\n  (declare-fun Expr!val!3 () Expr)\n  (declare-fun Expr!val!1 () Expr)\n  (declare-fun Expr!val!4 () Expr)\n  (declare-fun Expr!val!0 () Expr)\n  (declare-fun Expr!val!6 () Expr)\n  (declare-fun Expr!val!5 () Expr)\n  (declare-fun Expr!val!2 () Expr)\n  ;; cardinality constraint:\n  (forall ((x Expr))\n          (or (= x Expr!val!7)\n              (= x Expr!val!3)\n              (= x Expr!val!1)\n              (= x Expr!val!4)\n              (= x Expr!val!0)\n              (= x Expr!val!6)\n              (= x Expr!val!5)\n              (= x Expr!val!2)))\n  ;; -----------\n  ;; universe for Var:\n  ;;   Var!val!2 Var!val!0 Var!val!3 Var!val!4 Var!val!5 Var!val!6 Var!val!7 Var!val!1 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Var!val!2 () Var)\n  (declare-fun Var!val!0 () Var)\n  (declare-fun Var!val!3 () Var)\n  (declare-fun Var!val!4 () Var)\n  (declare-fun Var!val!5 () Var)\n  (declare-fun Var!val!6 () Var)\n  (declare-fun Var!val!7 () Var)\n  (declare-fun Var!val!1 () Var)\n  ;; cardinality constraint:\n  (forall ((x Var))\n          (or (= x Var!val!2)\n              (= x Var!val!0)\n              (= x Var!val!3)\n              (= x Var!val!4)\n              (= x Var!val!5)\n              (= x Var!val!6)\n              (= x Var!val!7)\n              (= x Var!val!1)))\n  ;; -----------\n  (define-fun t () Stmt\n    (Seq (as seq.empty (Seq Stmt))))\n  (define-fun s () Stmt\n    (Seq (seq.++ (seq.unit (Assignment Var!val!7 Expr!val!7))\n             (seq.unit (Assignment Var!val!6 Expr!val!6))\n             (seq.unit (Assignment Var!val!1 Expr!val!1))\n             (seq.unit (Assignment Var!val!0 Expr!val!0))\n             (seq.unit (Assignment Var!val!5 Expr!val!5)))))\n  (define-fun seq.nth_u ((x!0 (Seq Stmt)) (x!1 Int)) Stmt\n    (Seq (seq.++ (seq.unit (Assignment Var!val!7 Expr!val!7))\n                 (seq.unit (Assignment Var!val!6 Expr!val!6))\n                 (seq.unit (Assignment Var!val!1 Expr!val!1))\n                 (seq.unit (Assignment Var!val!0 Expr!val!0))\n                 (seq.unit (Assignment Var!val!5 Expr!val!5)))))\n)\nunsat\n",error:"",status:"z3-ran",hash:"4df670a452df5fad24a7b8bdcb06ab02e5a3c0fa"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h2",{id:"using-datatypes-for-solving-type-constraints"},"Using Datatypes for solving type constraints"),(0,t.yg)("p",null,"In the following we use algebraic datatypes to represent type constraints\nfor simply typed lambda calculus.\nTerms and types over simply typed lambda calculus are of the form"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mo",{parentName:"mrow"},"\u2223"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow"},"\u2223"),(0,t.yg)("mi",{parentName:"mrow"},"\u03bb"),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mtext",{parentName:"mrow"},"\xa0"),(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,t.yg)("mtext",{parentName:"mrow"},"\xa0"),(0,t.yg)("mi",{parentName:"mrow"},"M")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"M ::= x \\mid M M \\mid \\lambda x \\ . \\ M")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"::="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2223"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"MM"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2223"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"\u03bb"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace"},"\xa0"),(0,t.yg)("span",{parentName:"span",className:"mord"},"."),(0,t.yg)("span",{parentName:"span",className:"mspace"},"\xa0"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")))))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"\u03c4"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("mi",{parentName:"mrow"},"i"),(0,t.yg)("mi",{parentName:"mrow"},"n"),(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mo",{parentName:"mrow"},"\u2223"),(0,t.yg)("mi",{parentName:"mrow"},"s"),(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"r"),(0,t.yg)("mi",{parentName:"mrow"},"i"),(0,t.yg)("mi",{parentName:"mrow"},"n"),(0,t.yg)("mi",{parentName:"mrow"},"g"),(0,t.yg)("mo",{parentName:"mrow"},"\u2223"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4"),(0,t.yg)("mo",{parentName:"mrow"},"\u2192"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\tau ::= int \\mid string \\mid \\tau \\rightarrow \\tau")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"::="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2223"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2223"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"))))))),(0,t.yg)("p",null,"where ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"x")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x")))))," is bound variable, ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"M"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"M M'")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032")))))))))))))," applies the function ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"M")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"M")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")))))," to argument ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"M"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"M'")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),", and ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"\u03bb"),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mtext",{parentName:"mrow"},"\xa0"),(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,t.yg)("mtext",{parentName:"mrow"},"\xa0"),(0,t.yg)("mi",{parentName:"mrow"},"M")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\lambda x \\ . \\ M")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"\u03bb"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace"},"\xa0"),(0,t.yg)("span",{parentName:"span",className:"mord"},"."),(0,t.yg)("span",{parentName:"span",className:"mspace"},"\xa0"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")))))," is a lambda abstraction.\nThe ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"i"),(0,t.yg)("mi",{parentName:"mrow"},"n"),(0,t.yg)("mi",{parentName:"mrow"},"t")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"int")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6595em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t")))))," and ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"s"),(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"r"),(0,t.yg)("mi",{parentName:"mrow"},"i"),(0,t.yg)("mi",{parentName:"mrow"},"n"),(0,t.yg)("mi",{parentName:"mrow"},"g")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"string")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g")))))," types are type constants."),(0,t.yg)("p",null,"A type judgemnt is"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma \\vdash M : \\tau")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"))))))),(0,t.yg)("p",null,"where ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393")))))," is a type environment that provides types to free variables in ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"M")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"M")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"))))),".\nAn expression ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"M")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"M")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")))))," has a type ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"\u03c4")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\tau")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4")))))," if there is a derivation using the rules:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow",separator:"true"},","),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma, x : \\tau \\vdash x : \\tau")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mpunct"},","),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4")))))),(0,t.yg)("li",{parentName:"ul"},"If ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4"),(0,t.yg)("mo",{parentName:"mrow"},"\u2192"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"\u03c4"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma \\vdash M : \\tau \\rightarrow \\tau'")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),", ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"M"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma \\vdash M' : \\tau")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4")))))," then ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"M"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"\u03c4"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma \\vdash M M' : \\tau'")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),"."),(0,t.yg)("li",{parentName:"ul"},"If ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow",separator:"true"},","),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"\u03c4"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma, x : \\tau \\vdash M : \\tau'")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mpunct"},","),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032")))))))))))))," then ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393"),(0,t.yg)("mo",{parentName:"mrow"},"\u22a2"),(0,t.yg)("mi",{parentName:"mrow"},"\u03bb"),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow"},":"),(0,t.yg)("mi",{parentName:"mrow"},"\u03c4"),(0,t.yg)("mo",{parentName:"mrow"},"\u2192"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"\u03c4"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma \\vdash \\lambda x : M : \\tau \\rightarrow \\tau'")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"\u0393"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u22a2"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"\u03bb"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},":"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.1132em"}},"\u03c4"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),".")),(0,t.yg)("p",null,"We can use constraints over algebraic data-types to determine if expressions can be typed. "),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"y"),(0,t.yg)("mi",{parentName:"mrow"},"p"),(0,t.yg)("mi",{parentName:"mrow"},"e"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"M"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("mi",{parentName:"mrow"},"Y")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"type(M M') = Y")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1.0019em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,t.yg)("span",{parentName:"span",className:"mopen"},"("),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"Y"))))),",  ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"y"),(0,t.yg)("mi",{parentName:"mrow"},"p"),(0,t.yg)("mi",{parentName:"mrow"},"e"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("mi",{parentName:"mrow"},"X"),(0,t.yg)("mo",{parentName:"mrow"},"\u2192"),(0,t.yg)("mi",{parentName:"mrow"},"Y")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"type(M) = X \\rightarrow Y")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,t.yg)("span",{parentName:"span",className:"mopen"},"("),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"Y"))))),", ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"y"),(0,t.yg)("mi",{parentName:"mrow"},"p"),(0,t.yg)("mi",{parentName:"mrow"},"e"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msup"},"M"),(0,t.yg)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("mi",{parentName:"mrow"},"X")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"type(M') = X")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1.0019em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,t.yg)("span",{parentName:"span",className:"mopen"},"("),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"))))),", for fresh ",(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"X"),(0,t.yg)("mo",{parentName:"mrow",separator:"true"},","),(0,t.yg)("mi",{parentName:"mrow"},"Y")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"X, Y")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"X"),(0,t.yg)("span",{parentName:"span",className:"mpunct"},","),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"Y"))))),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("span",{parentName:"li",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"y"),(0,t.yg)("mi",{parentName:"mrow"},"p"),(0,t.yg)("mi",{parentName:"mrow"},"e"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,t.yg)("mi",{parentName:"mrow"},"\u03bb"),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"y"),(0,t.yg)("mi",{parentName:"mrow"},"p"),(0,t.yg)("mi",{parentName:"mrow"},"e"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,t.yg)("mi",{parentName:"mrow"},"x"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("mo",{parentName:"mrow"},"\u2192"),(0,t.yg)("mi",{parentName:"mrow"},"t"),(0,t.yg)("mi",{parentName:"mrow"},"y"),(0,t.yg)("mi",{parentName:"mrow"},"p"),(0,t.yg)("mi",{parentName:"mrow"},"e"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,t.yg)("mi",{parentName:"mrow"},"M"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"type(\\lambda x . M) = type(x) \\rightarrow type(M)")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,t.yg)("span",{parentName:"span",className:"mopen"},"("),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"\u03bb"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mord"},"."),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,t.yg)("span",{parentName:"span",className:"mopen"},"("),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,t.yg)("span",{parentName:"span",className:"mopen"},"("),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"))))))),(0,t.yg)("h4",{id:"checking-if-terms-have-principal-types"},"Checking if terms have principal types"),(0,t.yg)("p",null,"We define types and expressions as algebraic data-types.\nThe types of applications produces three constraints for\napplications and the single constraint for lambda abstraction.\nThe encoding into SMTLIB uses several features. Besides algebraic\ndata-types it uses uninterpreted functions instead of introducing\nfresh variables. It defines a recursive function that extracts\ntype constraints from an expression. "),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:'(declare-datatypes () ((Type \n  int \n  string \n  (arrow (dom Type) (rng Type)))))\n(declare-sort Var)\n(declare-datatypes () ((M \n  (lam (bound Var) (body M)) \n  (var (v Var)) \n  (app (fn M) (arg M)))))\n(declare-fun type (M) Type)\n(define-fun dom ((M M)) Type (dom (type M)))\n(define-fun rng ((M M)) Type (rng (type M)))\n(define-fun type ((x Var)) Type (type (var x)))\n(declare-const x Var)\n(declare-const y Var)\n(define-fun app-constraint ((M1 M) (M2 M)) Bool\n  (and (= (dom M1) (type M2))\n       (is-arrow (type M1))\n       (= (type (app M1 M2)) (rng M1)))\n)\n(define-fun lam-constraint ((x Var) (M M)) Bool\n  (= (type (lam x M)) (arrow (type x) (type M)))\n)\n\n(define-fun-rec type-constraints ((M M)) Bool\n    (match M\n     (case (var x) true)\n     (case (app M1 M2)\n         (if (app-constraint M1 M2)\n             (and (type-constraints M1) (type-constraints M2)) \n             false))\n     (case (lam x M1)\n         (if (lam-constraint x M1)\n             (type-constraints M1) \n             false))\n    )\n)\n\n; the identity function can be typed.\n(push)\n(assert (type-constraints (lam x (var x))))\n(check-sat)\n(pop)\n\n; there is no simple type for x such that (x x) is well typed.\n; the type constraints are unsat due to the semantics of algebraic\n; data-types: it is not possible to create an instance of an\n; algebraic data-type that is a sub-term of itself.\n(push)\n(assert (type-constraints (lam x (app (var x) (var x)))))\n(check-sat)\n(pop)\n\n; Applying a function that takes an integer to a string is not well-typed\n(push)\n(declare-const plus M)\n(assert (= (type plus) (arrow int (arrow int int))))\n(declare-fun ofint (Int) M)\n(assert (= (type (ofint 3)) int))\n(declare-fun ofstring (String) M)\n(assert (= (type (ofstring "a")) string))\n(assert (type-constraints (app (lam x (app (app plus (var x)) (ofint 3))) (ofstring "a"))))\n(check-sat)\n(pop)',result:{output:"sat\nunsat\nunsat\n",error:"",status:"z3-ran",hash:"07e1880cf210cc66915eb18d65f82f0c21f14b26"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h3",{id:"using-unsat-cores-to-identify-mutually-inconsistent-type-constraints"},"Using UNSAT cores to identify mutually inconsistent type constraints"),(0,t.yg)("p",null,"We can track each sub-expression and use unsatisfiable cores to\nidentify a set of mutually inconsistent type constraints.\nWhen the core is minimial, it means that modifying any one of the\nsubterms from the corresponding violated constraints can fix the type error. This provides some indication of error location, but isn't\ngreat for diagnostics. In the next section we use MaxSAT for more\ntargeted diagnostics. "),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:'(set-option :produce-unsat-cores true)\n(set-option :smt.core.minimize true)\n(declare-datatypes () ((Type \n  int \n  string \n  (arrow (dom Type) (rng Type)))))\n(declare-sort Var)\n(declare-datatypes () ((M \n  (lam (bound Var) (body M)) \n  (var (v Var)) \n  (app (fn M) (arg M)))))\n(declare-fun type (M) Type)\n(declare-const x Var)\n(declare-const y Var)\n(define-fun dom ((M M)) Type (dom (type M)))\n(define-fun rng ((M M)) Type (rng (type M)))\n(define-fun type ((x Var)) Type (type (var x)))\n(define-fun app-constraint ((M1 M) (M2 M)) Bool\n  (and (= (dom M1) (type M2))\n       (is-arrow (type M1))\n       (= (type (app M1 M2)) (rng M1))\n  )\n)\n(define-fun lam-constraint ((x Var) (M M)) Bool\n  (= (type (lam x M)) (arrow (type x) (type M)))\n)\n\n(declare-const plus M)\n(assert (= (type plus) (arrow int (arrow int int))))\n(declare-fun ofint (Int) M)\n(declare-fun ofstring (String) M)\n(define-const x_plus_3 M (app (app plus (var x)) (ofint 3)))\n\n(assert (= (type (ofint 3)) int))\n(assert (= (type (ofstring "a")) string))\n\n(assert (! (app-constraint (lam x x_plus_3) (ofstring "a")) :named t1))\n(assert (! (lam-constraint x x_plus_3)                      :named t2))\n(assert (! (app-constraint (app plus (var x)) (ofint 3))    :named t3))\n(assert (! (app-constraint plus (var x))                    :named t4))\n(check-sat)\n(get-unsat-core)',result:{output:"unsat\n(t4 t2 t1)\n",error:"",status:"z3-ran",hash:"3f5e5890ebbcd300cff74fb18111491ede3f679b"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,t.yg)("h3",{id:"using-optimization-to-localize-type-errors"},"Using optimization to localize type errors"),(0,t.yg)("p",null,"By asserting each type checking condition as a soft constraint and seeking an optimized solution to satisfy as many type constraints as possible, we obtain targeted information of what sub-terms could not\nbe type checked."),(0,t.yg)("p",null,"We can read off the type annotations for remaining sub-terms using\nthe current model. Albeit, it is not a user-friendly format. "),(0,t.yg)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:'(declare-datatypes () ((Type \n  int \n  string \n  (arrow (dom Type) (rng Type)))))\n(declare-sort Var)\n(declare-datatypes () ((M \n  (lam (bound Var) (body M)) \n  (var (v Var)) \n  (app (fn M) (arg M)))))\n(declare-fun type (M) Type)\n(declare-const x Var)\n(declare-const y Var)\n(define-fun dom ((M M)) Type (dom (type M)))\n(define-fun rng ((M M)) Type (rng (type M)))\n(define-fun type ((x Var)) Type (type (var x)))\n(define-fun app-constraint ((M1 M) (M2 M)) Bool\n  (and (= (dom M1) (type M2))\n          (is-arrow (type M1))\n          (= (type (app M1 M2)) (rng M1))\n  )\n)\n(define-fun lam-constraint ((x Var) (M M)) Bool\n  (= (type (lam x M)) (arrow (type x) (type M)))\n)\n\n(declare-const plus M)\n(assert (= (type plus) (arrow int (arrow int int))))\n(declare-fun ofint (Int) M)\n(assert (= (type (ofint 3)) int))\n(declare-fun ofstring (String) M)\n(declare-const t1 Bool)\n(declare-const t2 Bool)\n(declare-const t3 Bool)\n(declare-const t4 Bool)\n(assert (= (type (ofstring "a")) string))\n(define-const x_plus_3 M (app (app plus (var x)) (ofint 3)))\n(assert (= t1 (app-constraint (lam x x_plus_3) (ofstring "a"))))\n(assert (= t2 (lam-constraint x x_plus_3)))\n(assert (= t3 (app-constraint (app plus (var x)) (ofint 3))))\n(assert (= t4 (app-constraint plus (var x))))\n(assert-soft t1)\n(assert-soft t2)\n(assert-soft t3)\n(assert-soft t4)\n(check-sat)\n(get-objectives)\n(get-value (t1 t2 t3 t4))\n(get-model)',result:{output:"sat\n(objectives\n ( 1)\n)\n((t1 false)\n (t2 true)\n (t3 true)\n (t4 true))\n(\n  ;; universe for Var:\n  ;;   Var!val!2 Var!val!0 Var!val!3 Var!val!1 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Var!val!2 () Var)\n  (declare-fun Var!val!0 () Var)\n  (declare-fun Var!val!3 () Var)\n  (declare-fun Var!val!1 () Var)\n  ;; cardinality constraint:\n  (forall ((x Var))\n          (or (= x Var!val!2) (= x Var!val!0) (= x Var!val!3) (= x Var!val!1)))\n  ;; -----------\n  (define-fun x_plus_3 () M\n    (app (app plus (var x)) (ofint 3)))\n  (define-fun plus () M\n    (var Var!val!1))\n  (define-fun x () Var\n    Var!val!0)\n  (define-fun t3 () Bool\n    true)\n  (define-fun t4 () Bool\n    true)\n  (define-fun t1 () Bool\n    false)\n  (define-fun t2 () Bool\n    true)\n  (define-fun y () Var\n    Var!val!2)\n  (define-fun ofstring ((x!0 String)) M\n    (var Var!val!2))\n  (define-fun type ((x!0 M)) Type\n    (ite (= x!0 (var Var!val!1)) (arrow int (arrow int int))\n    (ite (= x!0 (var Var!val!2)) string\n    (ite (= x!0\n            (lam Var!val!0\n                 (app (app (var Var!val!1) (var Var!val!0)) (var Var!val!3))))\n      (arrow int int)\n    (ite (= x!0\n            (let ((a!1 (lam Var!val!0\n                            (app (app (var Var!val!1) (var Var!val!0))\n                                 (var Var!val!3)))))\n              (app a!1 (var Var!val!2))))\n      (arrow (arrow int int) (arrow int int))\n    (ite (= x!0 (app (var Var!val!1) (var Var!val!0))) (arrow int int)\n      int))))))\n  (define-fun ofint ((x!0 Int)) M\n    (var Var!val!3))\n)\n",error:"",status:"z3-ran",hash:"d075b1b1d8fba87be0f64383ec310aacc1257623"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.12.1",tool:"z3-solver"},mdxType:"CustomCodeBlock"}))}c.isMDXComponent=!0}}]);