"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5897],{4405:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(3117),a=(n(7294),n(3905));n(3234);const s={title:"Advanced Topics",sidebar_position:3},i=void 0,o={unversionedId:"Programming Z3/guide/advanced",id:"Programming Z3/guide/advanced",title:"Advanced Topics",description:"Expressions, Sorts and Declarations",source:"@site/docs/07 - Programming Z3/01 - guide/03 - advanced.md",sourceDirName:"07 - Programming Z3/01 - guide",slug:"/Programming Z3/guide/advanced",permalink:"/z3guide/docs/Programming Z3/guide/advanced",draft:!1,editUrl:"https://github.com/microsoft/z3guide/tree/main/website/docs/07 - Programming Z3/01 - guide/03 - advanced.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Advanced Topics",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Z3 API in Python",permalink:"/z3guide/docs/Programming Z3/guide/basics"},next:{title:"Introduction",permalink:"/z3guide/docs/Programming Z3/interfaces/Introduction"}},d={},l=[{value:"Expressions, Sorts and Declarations",id:"expressions-sorts-and-declarations",level:2}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"expressions-sorts-and-declarations"},"Expressions, Sorts and Declarations"),(0,a.kt)("p",null,"In Z3, expressions, sorts and declarations are called ",(0,a.kt)("em",{parentName:"p"},"ASTs"),".\nASTs are directed acyclic graphs. Every expression has a sort (aka type).\nThe method ",(0,a.kt)("tt",null,"sort()")," retrieves the sort of an expression."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"x = Int('x')\ny = Real('y')\nprint ((x + 1).sort())\nprint ((y + 1).sort())\nprint ((x >= 2).sort())\n")),(0,a.kt)("p",null,"The function ",(0,a.kt)("tt",null,"eq(n1, n2)")," returns ",(0,a.kt)("tt",null,"True")," if ",(0,a.kt)("tt",null,"n1"),"\nand ",(0,a.kt)("tt",null,"n2")," are the same AST. This is a structural test. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"x, y = Ints('x y')\nprint (eq(x + y, x + y))\nprint (eq(x + y, y + x))\nn = x + y\nprint (eq(n, x + y))\n# x2 is eq to x\nx2 = Int('x') \nprint (eq(x, x2))\n# the integer variable x is not equal to \n# the real variable x\nprint (eq(Int('x'), Real('x')))\n")),(0,a.kt)("p",null,"The method ",(0,a.kt)("tt",null,"hash()")," returns a hashcode for an AST node.\nIf ",(0,a.kt)("tt",null,"eq(n1, n2)")," returns ",(0,a.kt)("tt",null,"True"),", then ",(0,a.kt)("tt",null,"n1.hash()"),"\nis equal to ",(0,a.kt)("tt",null,"n2.hash()"),". "))}c.isMDXComponent=!0}}]);