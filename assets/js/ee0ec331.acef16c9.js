"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2558],{473:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>l,contentTitle:()=>n,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=s(8168),a=(s(6540),s(5680));s(2317);const r={title:"Simplifiers",sidebar_position:5},n=void 0,o={unversionedId:"strategies/simplifiers",id:"strategies/simplifiers",title:"Simplifiers",description:"A subset of tactics can be applied in incremental mode as pre-processing",source:"@site/docs-smtlib/03 - strategies/05 - simplifiers.md",sourceDirName:"03 - strategies",slug:"/strategies/simplifiers",permalink:"/z3guide/docs/strategies/simplifiers",draft:!1,editUrl:"https://github.com/microsoft/z3guide/tree/main/website/docs-smtlib/03 - strategies/05 - simplifiers.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Simplifiers",sidebar_position:5},sidebar:"smtlibSidebar",previous:{title:"Probes",permalink:"/z3guide/docs/strategies/probes"},next:{title:"Tactics Summary",permalink:"/z3guide/docs/strategies/summary"}},l={},p=[],m={toc:p},c="wrapper";function u(e){let{components:i,...s}=e;return(0,a.yg)(c,(0,t.A)({},m,s,{components:i,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"A subset of tactics can be applied in incremental mode as pre-processing\nsimplification to solvers.\nThe SMTLIB interface provides a way to specialize solvers using a\nsequence of pre-processing simplification steps. "),(0,a.yg)("p",null,"You can list the set of available simplifiers with information about\ntheir parameters using the command."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"(help-simplifier)\n")),(0,a.yg)("p",null,"To create a specialized solver use the command ",(0,a.yg)("inlineCode",{parentName:"p"},"set-simplifier"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"(set-simplifier (then simplify solve-eqs elim-unconstrained propagate-values simplify qe-light simplify qe-light))\n")),(0,a.yg)("p",null,"Simplifiers are a special case of tactics. Not all tactics can be used as a simplifier.\nThe tactic language for composing simplifiers is also more rudimentary. The only operations are\nsequential composition and parameter adjustment.\nYou can sequence simplifiers using ",(0,a.yg)("inlineCode",{parentName:"p"},"then")," (or ",(0,a.yg)("inlineCode",{parentName:"p"},"and-then"),") similar to tactics. You can also set parameters on\nsimplifiers using the same syntax as for tactics."))}u.isMDXComponent=!0}}]);