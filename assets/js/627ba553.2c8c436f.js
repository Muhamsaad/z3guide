"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[952],{831:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=n(3117),l=(n(7294),n(3905)),u=n(7689);const r={title:"Sequences",sidebar_position:10},i=void 0,o={unversionedId:"guide/Sequences",id:"guide/Sequences",title:"Sequences",description:"The sort constructor Seq can be used to create sequences over any base sort.",source:"@site/docs/guide/10 - Sequences.md",sourceDirName:"guide",slug:"/guide/Sequences",permalink:"/rise4fun/docs/guide/Sequences",draft:!1,editUrl:"https://github.com/microsoft/rise4fun/tree/main/website/docs/guide/10 - Sequences.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Sequences",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Strings",permalink:"/rise4fun/docs/guide/Strings"},next:{title:"Regular Expressions",permalink:"/rise4fun/docs/guide/Regular Expressions"}},a={},c=[{value:"Operations",id:"operations",level:2},{value:"Sequence Examples",id:"sequence-examples",level:2}],k={toc:c};function d(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,s.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The sort constructor ",(0,l.kt)("inlineCode",{parentName:"p"},"Seq")," can be used to create sequences over any base sort.\nFor example, a sequence of integers is ",(0,l.kt)("inlineCode",{parentName:"p"},"(Seq Int)"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"(Seq Unicode)"),"\nis the definition of ",(0,l.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,l.kt)("h2",{id:"operations"},"Operations"),(0,l.kt)("p",null,"Most string operations have corresponding sequence variants. In addition, there are operations\nto create a unit sequence and the empty sequence over any base sort."),(0,l.kt)("table",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"Operation"),(0,l.kt)("td",null,"Brief description")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.unit elem)")),(0,l.kt)("td",null,"Sequence with a single element ",(0,l.kt)("tt",null,"elem"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(as seq.empty (Seq Int))")),(0,l.kt)("td",null,"The empty sequence of integers.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.++ a b c)")),(0,l.kt)("td",null,"Concatenation of one or more sequences.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.len s)")),(0,l.kt)("td",null,"Sequence length. Returns an integer.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.extract s offset length)")),(0,l.kt)("td",null,"Retrieves sub-sequence of ",(0,l.kt)("tt",null,"s")," at ",(0,l.kt)("tt",null,"offset"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.indexof s sub)")),(0,l.kt)("td",null,"Retrieves first position of ",(0,l.kt)("tt",null,"sub")," in ",(0,l.kt)("tt",null,"s"),", -1 if there are no occurrences")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.indexof s sub offset)")),(0,l.kt)("td",null,"Retrieves first position of ",(0,l.kt)("tt",null,"sub")," at or after ",(0,l.kt)("tt",null,"offset")," in ",(0,l.kt)("tt",null,"s"),", -1 if there are no occurrences")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.at s offset)")),(0,l.kt)("td",null,"Sub-sequence of length 1 at ",(0,l.kt)("tt",null,"offset")," in ",(0,l.kt)("tt",null,"s"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.nth s offset)")),(0,l.kt)("td",null,"Element at ",(0,l.kt)("tt",null,"offset")," in ",(0,l.kt)("tt",null,"s"),". If ",(0,l.kt)("tt",null,"offset")," is out of bounds the result is under-specified. In other words, it is treated as a fresh variable.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.contains s sub)")),(0,l.kt)("td",null,"Does ",(0,l.kt)("tt",null,"s")," contain the sub-sequence ",(0,l.kt)("tt",null,"sub"),"?")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.prefixof pre s)")),(0,l.kt)("td",null,"Is ",(0,l.kt)("tt",null,"pre")," a prefix of ",(0,l.kt)("tt",null,"s"),"?")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.suffixof suf s)")),(0,l.kt)("td",null,"Is ",(0,l.kt)("tt",null,"suf")," a suffix of ",(0,l.kt)("tt",null,"s"),"?")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("tt",null,"(seq.replace s src dst)")),(0,l.kt)("td",null,"Replace the first occurrence of ",(0,l.kt)("tt",null,"src")," by ",(0,l.kt)("tt",null,"dst")," in ",(0,l.kt)("tt",null,"s"),"."))),(0,l.kt)("h2",{id:"sequence-examples"},"Sequence Examples"),(0,l.kt)("p",null,"When inserting ",(0,l.kt)("inlineCode",{parentName:"p"},"b")," at or after position 8, but before the length of the string, which is at least 10,\nthen the resulting string has the same length, and either character 8 or 9 are unchanged."),(0,l.kt)(u.Z,{input:{code:"(declare-const s (Seq Int))\n(declare-const t (Seq Int))\n(declare-const j Int)\n(declare-const b Int)\n\n(assert (<= 10 (seq.len s)))\n(assert (<= 8 j))\n(assert (< j (seq.len s)))\n(assert (= t (seq.++ (seq.extract s 0 j) (seq.unit b) (seq.extract s (+ j 1) (- (seq.len s) j 1)))))\n(push)\n(assert (not (= (seq.unit b) (seq.at t j))))\n(check-sat)\n(pop)\n(push)\n(assert (not (= (seq.len s) (seq.len t))))\n(check-sat)\n(pop)\n(push)\n(assert (not (= (seq.at s 8) (seq.at t 8))))\n(assert (not (= (seq.at s 9) (seq.at t 9))))\n(check-sat)\n(pop)",result:{output:"unsat\nunsat\nunsat\n",error:"",status:"z3-ran",hash:"76845c2a4df47b13b624afd000cec8d8f1141e3e"}},mdxType:"Z3CodeBlock"}))}d.isMDXComponent=!0}}]);