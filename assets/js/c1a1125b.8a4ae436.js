"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[250],{7590:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var a=n(3117),s=(n(7294),n(3905)),i=n(7689);const r={title:"Lambdas",sidebar_position:16},o=void 0,d={unversionedId:"guide/Lambdas",id:"guide/Lambdas",title:"Lambdas",description:"Lambda binding is available as an extension to the theory of arrays.",source:"@site/docs/guide/15 - Lambdas.md",sourceDirName:"guide",slug:"/guide/Lambdas",permalink:"/rise4fun/docs/guide/Lambdas",draft:!1,editUrl:"https://github.com/microsoft/rise4fun/tree/main/website/docs/guide/15 - Lambdas.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"Lambdas",sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Quantifiers",permalink:"/rise4fun/docs/guide/Quantifiers"},next:{title:"Conclusion",permalink:"/rise4fun/docs/guide/Conclusion"}},c={},u=[],l={toc:u};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Lambda binding is available as an extension to the theory of arrays.\nThus, the type of a lambda expression is an array where the domain of the\narray are the argument types and the range is the sort of the body of the lambda expression."),(0,s.kt)(i.Z,{input:{code:"(declare-const m (Array Int Int))\n(declare-const m1 (Array Int Int))\n(declare-const z Int)\n(define-fun memset ((lo Int) (hi Int) (y Int) (m (Array Int Int))) \n                   (Array Int Int) \n           (lambda ((x Int)) (if (and (<= lo x) (<= x hi)) y (m x))))\n(assert (= m1 (memset 1 700 z m)))\n(assert (not (= (select m1 6) z)))\n(check-sat)",result:{output:"unsat\n",error:"",status:"z3-ran",hash:"4f3dbc4fc683a122c143f9acf7967a776fe6170b"}},mdxType:"Z3CodeBlock"}),(0,s.kt)("p",null,"The main utility of lambdas in Z3 is for introducing inline definitions as the ",(0,s.kt)("inlineCode",{parentName:"p"},"memset")," example illustrates.\nThere is limited true higher order reasoning. One basic example that ",(0,s.kt)("em",{parentName:"p"},"does")," work thanks to model construction of MBQI instantiation procedure\nis establishing a second-order definition for equality."),(0,s.kt)(i.Z,{input:{code:"(declare-const x Int)\n(declare-const y Int)\n(assert (forall ((q (Array Int Bool))) (= (q x) (q y))))\n(assert (not (= x y)))\n(check-sat)",result:{output:"unsat\n",error:"",status:"z3-ran",hash:"2ec98ca10c87338b0a0f492de5807d841fc3cc6b"}},mdxType:"Z3CodeBlock"}))}m.isMDXComponent=!0}}]);