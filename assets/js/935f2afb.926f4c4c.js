"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:i=>{i.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"logic","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/logic/intro","docId":"logic/intro"},{"type":"link","label":"Basic Commands","href":"/z3guide/docs/logic/basiccommands","docId":"logic/basiccommands"},{"type":"link","label":"Propositional Logic","href":"/z3guide/docs/logic/propositional-logic","docId":"logic/propositional-logic"},{"type":"link","label":"Uninterpreted Functions and Constants","href":"/z3guide/docs/logic/Uninterpreted-functions-and-constants","docId":"logic/Uninterpreted-functions-and-constants"},{"type":"link","label":"Quantifiers","href":"/z3guide/docs/logic/Quantifiers","docId":"logic/Quantifiers"},{"type":"link","label":"Lambdas","href":"/z3guide/docs/logic/Lambdas","docId":"logic/Lambdas"},{"type":"link","label":"Recursive Functions","href":"/z3guide/docs/logic/Recursive Functions","docId":"logic/Recursive Functions"},{"type":"link","label":"Conclusion","href":"/z3guide/docs/logic/Conclusion","docId":"logic/Conclusion"}]},{"type":"category","label":"theories","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Arithmetic","href":"/z3guide/docs/theories/Arithmetic","docId":"theories/Arithmetic"},{"type":"link","label":"Bitvectors","href":"/z3guide/docs/theories/Bitvectors","docId":"theories/Bitvectors"},{"type":"link","label":"IEEE Floats","href":"/z3guide/docs/theories/IEEE Floats","docId":"theories/IEEE Floats"},{"type":"link","label":"Arrays","href":"/z3guide/docs/theories/Arrays","docId":"theories/Arrays"},{"type":"link","label":"Datatypes","href":"/z3guide/docs/theories/Datatypes","docId":"theories/Datatypes"},{"type":"link","label":"Strings","href":"/z3guide/docs/theories/Strings","docId":"theories/Strings"},{"type":"link","label":"Sequences","href":"/z3guide/docs/theories/Sequences","docId":"theories/Sequences"},{"type":"link","label":"Regular Expressions","href":"/z3guide/docs/theories/Regular Expressions","docId":"theories/Regular Expressions"},{"type":"link","label":"Unicode Characters","href":"/z3guide/docs/theories/Characters","docId":"theories/Characters"},{"type":"link","label":"Special Relations","href":"/z3guide/docs/theories/Special Relations","docId":"theories/Special Relations"}]},{"type":"category","label":"strategies","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/strategies/intro","docId":"strategies/intro"},{"type":"link","label":"Goals","href":"/z3guide/docs/strategies/goals","docId":"strategies/goals"},{"type":"link","label":"Tactics","href":"/z3guide/docs/strategies/tactics","docId":"strategies/tactics"},{"type":"link","label":"Probes","href":"/z3guide/docs/strategies/probes","docId":"strategies/probes"}]},{"type":"category","label":"optimization","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/optimization/intro","docId":"optimization/intro"},{"type":"link","label":"Optimization from the API","href":"/z3guide/docs/optimization/apioptimization","docId":"optimization/apioptimization"},{"type":"link","label":"Arithmetical Optimization","href":"/z3guide/docs/optimization/arithmeticaloptimization","docId":"optimization/arithmeticaloptimization"},{"type":"link","label":"Soft Constraints","href":"/z3guide/docs/optimization/softconstraints","docId":"optimization/softconstraints"},{"type":"link","label":"Combining Objectives","href":"/z3guide/docs/optimization/combiningobjectives","docId":"optimization/combiningobjectives"},{"type":"link","label":"A Small Case Study","href":"/z3guide/docs/optimization/asmallcasestudy","docId":"optimization/asmallcasestudy"},{"type":"link","label":"Advanced Topics","href":"/z3guide/docs/optimization/advancedtopics","docId":"optimization/advancedtopics"}]},{"type":"category","label":"fixedpoints","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/fixedpoints/intro","docId":"fixedpoints/intro"},{"type":"link","label":"Basic Datalog","href":"/z3guide/docs/fixedpoints/basicdatalog","docId":"fixedpoints/basicdatalog"},{"type":"link","label":"Generalized PDR","href":"/z3guide/docs/fixedpoints/engineforpdr","docId":"fixedpoints/engineforpdr"},{"type":"link","label":"Syntax","href":"/z3guide/docs/fixedpoints/syntax","docId":"fixedpoints/syntax"}]},{"type":"category","label":"playground","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Playground","href":"/z3guide/docs/playground/playground","docId":"playground/playground"}]},{"type":"category","label":"Programming Z3","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Using Z3 from Python","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/Programming Z3/Using Z3 from Python/Introduction","docId":"Programming Z3/Using Z3 from Python/Introduction"},{"type":"link","label":"Advanced Topics","href":"/z3guide/docs/Programming Z3/Using Z3 from Python/advanced","docId":"Programming Z3/Using Z3 from Python/advanced"},{"type":"link","label":"Strategies","href":"/z3guide/docs/Programming Z3/Using Z3 from Python/Strategies","docId":"Programming Z3/Using Z3 from Python/Strategies"},{"type":"link","label":"Fixedpoints","href":"/z3guide/docs/Programming Z3/Using Z3 from Python/Fixedpoints","docId":"Programming Z3/Using Z3 from Python/Fixedpoints"},{"type":"link","label":"Cores and Satisfying Subsets","href":"/z3guide/docs/Programming Z3/Using Z3 from Python/Cores and Satisfying Subsets","docId":"Programming Z3/Using Z3 from Python/Cores and Satisfying Subsets"}]},{"type":"category","label":"interfaces","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/Programming Z3/interfaces/Introduction","docId":"Programming Z3/interfaces/Introduction"}]},{"type":"category","label":"language bindings","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/Programming Z3/language bindings/Introduction","docId":"Programming Z3/language bindings/Introduction"}]},{"type":"category","label":"reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/z3guide/docs/Programming Z3/reference/Introduction","docId":"Programming Z3/reference/Introduction"}]}]},{"type":"category","label":"Z3 JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"test","href":"/z3guide/docs/Z3 JavaScript/test","docId":"Z3 JavaScript/test"},{"type":"link","label":"This file is to contain more tests","href":"/z3guide/docs/Z3 JavaScript/more tests","docId":"Z3 JavaScript/more tests"}]}]},"docs":{"fixedpoints/basicdatalog":{"id":"fixedpoints/basicdatalog","title":"Basic Datalog","description":"The default fixed-point engine is a bottom-up Datalog engine. It works with finite relations and uses finite table representations as hash tables as the default way to represent finite relations.","sidebar":"tutorialSidebar"},"fixedpoints/engineforpdr":{"id":"fixedpoints/engineforpdr","title":"Generalized PDR","description":"A different underlying engine for fixed-points is based on an algorithm for","sidebar":"tutorialSidebar"},"fixedpoints/intro":{"id":"fixedpoints/intro","title":"Introduction","description":"Z3 contains an extension called muZ for reasoning about Constrained Horn Clauses and Datalog programs.","sidebar":"tutorialSidebar"},"fixedpoints/syntax":{"id":"fixedpoints/syntax","title":"Syntax","description":"Three different text-based input formats are accepted.","sidebar":"tutorialSidebar"},"logic/basiccommands":{"id":"logic/basiccommands","title":"Basic Commands","description":"The Z3 input format is an extension of the one defined by the SMT-LIB format.","sidebar":"tutorialSidebar"},"logic/Conclusion":{"id":"logic/Conclusion","title":"Conclusion","description":"Z3 is an efficient theorem prover used in many software testing, analysis and verification applications. In this tutorial, we covered its main capabilities using the textual interface. However, most applications use the Z3 programmatic API to access these features.","sidebar":"tutorialSidebar"},"logic/intro":{"id":"logic/intro","title":"Introduction","description":"Z3 is a state-of-the art theorem prover from Microsoft Research. It can be used to check the satisfiability of logical formulas over one or more theories. Z3 offers a compelling match for software analysis and verification tools, since several common software constructs map directly into supported theories.","sidebar":"tutorialSidebar"},"logic/Lambdas":{"id":"logic/Lambdas","title":"Lambdas","description":"Lambda binding is available as an extension to the theory of arrays.","sidebar":"tutorialSidebar"},"logic/propositional-logic":{"id":"logic/propositional-logic","title":"Propositional Logic","description":"The pre-defined sort Bool is the sort (type) of all Boolean propositional expressions. Z3 supports the usual Boolean operators and, or, xor, not, => (implication), ite (if-then-else). Bi-implications are represented using equality =. The following example shows how to prove that if p implies q and q implies r, then p implies r. We accomplish that by showing that the negation is unsatisfiable. The command define-fun is used to define a macro (aka alias). In this example, conjecture is an alias for the conjecture we want to prove.","sidebar":"tutorialSidebar"},"logic/Quantifiers":{"id":"logic/Quantifiers","title":"Quantifiers","description":"Z3 is a decision procedure for the combination of the previous quantifier-free theories. That is, it can answer whether a quantifier-free formula, modulo the theories referenced by the formula, is satisfiable or whether it is unsatisfiable. Z3 also accepts and can work with formulas that use quantifiers. It is no longer a decision procedure for such formulas in general (and for good reasons, as there can be no decision procedure for first-order logic).","sidebar":"tutorialSidebar"},"logic/Recursive Functions":{"id":"logic/Recursive Functions","title":"Recursive Functions","description":"SMTLIB2 standard: Page 62","sidebar":"tutorialSidebar"},"logic/Uninterpreted-functions-and-constants":{"id":"logic/Uninterpreted-functions-and-constants","title":"Uninterpreted Functions and Constants","description":"The basic building blocks of SMT formulas are constants and functions. Constants are just functions that take no arguments. So everything is really just a function.","sidebar":"tutorialSidebar"},"optimization/advancedtopics":{"id":"optimization/advancedtopics","title":"Advanced Topics","description":"Difference Logic","sidebar":"tutorialSidebar"},"optimization/apioptimization":{"id":"optimization/apioptimization","title":"Optimization from the API","description":"Z3\'s programmatic API exposes all available optimization features.","sidebar":"tutorialSidebar"},"optimization/arithmeticaloptimization":{"id":"optimization/arithmeticaloptimization","title":"Arithmetical Optimization","description":"Z3 extends the The SMTLIB format with the following commands for working with optimization objectives:","sidebar":"tutorialSidebar"},"optimization/asmallcasestudy":{"id":"optimization/asmallcasestudy","title":"A Small Case Study","description":"In collaboration with Anh-Dung Phan.","sidebar":"tutorialSidebar"},"optimization/combiningobjectives":{"id":"optimization/combiningobjectives","title":"Combining Objectives","description":"Many optimization problems require solving multiple objectives.","sidebar":"tutorialSidebar"},"optimization/intro":{"id":"optimization/intro","title":"Introduction","description":"Z3\'s main functionality to checking the satisfiability of logical formulas over one or more theories. Z3 can produce models for satisfiable formulas. Yet in many cases arbitrary models are insufficient and applications are really solving optimization problems: one or more values should be minimal or maximal. When there are multiple objectives, they should be combined using Pareto fronts, lexicographic priorities, or optimized independently. This section describes a feature exposed by Z3 that lets users formulate objective functions directly with Z3. Under the hood is a portfolio of approaches for solving linear optimization problems over SMT formulas, MaxSMT, and their combinations.","sidebar":"tutorialSidebar"},"optimization/softconstraints":{"id":"optimization/softconstraints","title":"Soft Constraints","description":"The (assert-soft formula [id id]) command asserts a weighted soft constraint. The weight must be a positive natural number, but is optional. If omitted, the weight is set to 1.","sidebar":"tutorialSidebar"},"playground/playground":{"id":"playground/playground","title":"Playground","description":"Run Z3 on SMTLIB on the web!","sidebar":"tutorialSidebar"},"Programming Z3/interfaces/Introduction":{"id":"Programming Z3/interfaces/Introduction","title":"Introduction","description":"Placeholder","sidebar":"tutorialSidebar"},"Programming Z3/language bindings/Introduction":{"id":"Programming Z3/language bindings/Introduction","title":"Introduction","description":"Placeholder","sidebar":"tutorialSidebar"},"Programming Z3/reference/Introduction":{"id":"Programming Z3/reference/Introduction","title":"Introduction","description":"Placeholder","sidebar":"tutorialSidebar"},"Programming Z3/Using Z3 from Python/advanced":{"id":"Programming Z3/Using Z3 from Python/advanced","title":"Advanced Topics","description":"Expressions, Sorts and Declarations","sidebar":"tutorialSidebar"},"Programming Z3/Using Z3 from Python/Cores and Satisfying Subsets":{"id":"Programming Z3/Using Z3 from Python/Cores and Satisfying Subsets","title":"Cores and Satisfying Subsets","description":"This tutorial illustrates how to use Z3 for extracting all minimal unsatisfiable cores","sidebar":"tutorialSidebar"},"Programming Z3/Using Z3 from Python/Fixedpoints":{"id":"Programming Z3/Using Z3 from Python/Fixedpoints","title":"Fixedpoints","description":"This tutorial illustrates uses of Z3\'s fixedpoint engine.","sidebar":"tutorialSidebar"},"Programming Z3/Using Z3 from Python/Introduction":{"id":"Programming Z3/Using Z3 from Python/Introduction","title":"Introduction","description":"This tutorial demonstrates the main capabilities of Z3Py: the Z3 API in Python. There are many benefits to using, Z3Py. First, it is much more familiar to individuals who have seen programming languages before, but have never seen functional languages like Z3.","sidebar":"tutorialSidebar"},"Programming Z3/Using Z3 from Python/Strategies":{"id":"Programming Z3/Using Z3 from Python/Strategies","title":"Strategies","description":"High-performance solvers, such as Z3, contain many tightly integrated, handcrafted heuristic","sidebar":"tutorialSidebar"},"strategies/goals":{"id":"strategies/goals","title":"Goals","description":"Z3 implements a methodology for orchestrating reasoning engines where \\"big\\" symbolic reasoning steps are represented as functions known as tactics, and tactics are composed using combinators known as tacticals. Tactics process sets of formulas called Goals.","sidebar":"tutorialSidebar"},"strategies/intro":{"id":"strategies/intro","title":"Introduction","description":"High-performance solvers, such as Z3, contain many tightly integrated, handcrafted heuristic combinations of algorithmic proof methods. While these heuristic combinations tend to be highly tuned for known classes of problems, they may easily perform very badly on new classes of problems. This issue is becoming increasingly pressing as solvers begin to gain the attention of practitioners in diverse areas of science and engineering. In many cases, changes to the solver heuristics can make a tremendous difference.","sidebar":"tutorialSidebar"},"strategies/probes":{"id":"strategies/probes","title":"Probes","description":"Probes (aka formula measures) are evaluated over goals. Boolean expressions over them can be built using relational operators and Boolean connectives. The tactic (fail-if cond) fails if the given goal does not satisfy the condition cond. Many numeric and Boolean measures are available in Z3. The command (help-tactic) provides the list of all built-in probes.","sidebar":"tutorialSidebar"},"strategies/tactics":{"id":"strategies/tactics","title":"Tactics","description":"Z3 comes equipped with many built-in tactics. The command (help-tactic) provides a short description of all built-in tactics.","sidebar":"tutorialSidebar"},"theories/Arithmetic":{"id":"theories/Arithmetic","title":"Arithmetic","description":"SMTLIB2 standard Integers","sidebar":"tutorialSidebar"},"theories/Arrays":{"id":"theories/Arrays","title":"Arrays","description":"SMTLIB2 standard Arrays","sidebar":"tutorialSidebar"},"theories/Bitvectors":{"id":"theories/Bitvectors","title":"Bitvectors","description":"SMTLIB2 standard The Theory of fixed sized bit-vectors","sidebar":"tutorialSidebar"},"theories/Characters":{"id":"theories/Characters","title":"Unicode Characters","description":"The Unicode sort ranges over unicode characters.","sidebar":"tutorialSidebar"},"theories/Datatypes":{"id":"theories/Datatypes","title":"Datatypes","description":"Algebraic datatypes, known from programming languages such as ML, offer a convenient way for specifying common data structures. Records and tuples are special cases of algebraic datatypes, and so are scalars (enumeration types). But algebraic datatypes are more general. They can be used to specify finite lists, trees and other recursive structures.","sidebar":"tutorialSidebar"},"theories/IEEE Floats":{"id":"theories/IEEE Floats","title":"IEEE Floats","description":"SMTLIB2 standard IEEE Floating Point Numbers","sidebar":"tutorialSidebar"},"theories/Regular Expressions":{"id":"theories/Regular Expressions","title":"Regular Expressions","description":"SMTLIB2 standard The theory of unicode strings and regular expressions","sidebar":"tutorialSidebar"},"theories/Sequences":{"id":"theories/Sequences","title":"Sequences","description":"The sort constructor Seq can be used to create sequences over any base sort.","sidebar":"tutorialSidebar"},"theories/Special Relations":{"id":"theories/Special Relations","title":"Special Relations","description":"Special Binary Relations","sidebar":"tutorialSidebar"},"theories/Strings":{"id":"theories/Strings","title":"Strings","description":"SMTLIB2 standard The theory of unicode strings","sidebar":"tutorialSidebar"},"Z3 JavaScript/more tests":{"id":"Z3 JavaScript/more tests","title":"This file is to contain more tests","description":"","sidebar":"tutorialSidebar"},"Z3 JavaScript/test":{"id":"Z3 JavaScript/test","title":"test","description":"Run Z3 in JS bindings","sidebar":"tutorialSidebar"}}}')}}]);