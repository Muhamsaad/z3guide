"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9],{1095:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>d});var s=r(3117),n=(r(7294),r(3905)),o=r(504),i=r.n(o);const a={},c="This file is to contain more tests",u={unversionedId:"Z3 JavaScript/more tests",id:"Z3 JavaScript/more tests",title:"This file is to contain more tests",description:"including samples for which there are python variants for side-to-side learning",source:"@site/docs-programming/02 - Z3 JavaScript/02 - more tests.md",sourceDirName:"02 - Z3 JavaScript",slug:"/Z3 JavaScript/more tests",permalink:"/z3guide/programming/Z3 JavaScript/more tests",draft:!1,editUrl:"https://github.com/microsoft/z3guide/tree/main/website/docs-programming/02 - Z3 JavaScript/02 - more tests.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"test",permalink:"/z3guide/programming/Z3 JavaScript/test"},next:{title:"Examples from the JS bindings unit test",permalink:"/z3guide/programming/Z3 JavaScript/more JS examples"}},l={},d=[{value:"From High-level.test.ts",id:"from-high-leveltestts",level:2}],m={toc:d};function p(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,s.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"this-file-is-to-contain-more-tests"},"This file is to contain more tests"),(0,n.kt)("p",null,"including samples for which there are python variants for side-to-side learning"),(0,n.kt)(i(),{input:{lang:"z3-js",highlight:"js",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"const x = Z3.Int.const('x');\n\nconst solver = new Z3.Solver();\nsolver.add(Z3.And(x.ge(10), x.le(9)));\nawait solver.check();",result:{output:"unsat",error:"",status:"z3-ran",hash:"ef0dc6019082f79819e3d1ec99d94ce7857d3e78"},githubRepo:"Z3Prover/z3"},mdxType:"CustomCodeBlock"}),(0,n.kt)("p",null,"Porting guide:"),(0,n.kt)(o.GithubDiscussionBtn,{repo:{repo:"Z3Prover/z3"},mdxType:"GithubDiscussionBtn"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"x = Int('x')\ny = Int('y')\nsolve(x > 2, y < 10, x + 2*y == 7)\n")),(0,n.kt)(i(),{input:{lang:"z3-js",highlight:"js",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"const x = Z3.Int.const('x');\nconst y = Z3.Int.const('y');\nconst model = await Z3.solve(x.gt(2), y.lt(10), x.add(y.mul(2)).eq(7)) as Model;\nmodel.sexpr()",result:{output:"(define-fun y () Int\n  0)\n(define-fun x () Int\n  7)",error:"",status:"z3-ran",hash:"0deae3b90290aef3c6dfac8e5889eddc8eb7a1c8"},githubRepo:"Z3Prover/z3"},mdxType:"CustomCodeBlock"}),(0,n.kt)(o.GithubDiscussionBtn,{repo:{repo:"Z3Prover/z3"},mdxType:"GithubDiscussionBtn"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"x = Int('x')\ny = Int('y')\nprint (simplify(x + y + 2*x + 3))\nprint (simplify(x < y + x + 2))\nprint (simplify(And(x + 1 >= 3, x**2 + x**2 + y**2 + 2 >= 5)))\n")),(0,n.kt)(i(),{input:{lang:"z3-js",highlight:"js",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"const x = Z3.Int.const('x');\nconst y = Z3.Int.const('y');\n// TODO - simplify isn't yet exposed over JS: await Z3.simplify(x.add(y).add(x.mul(2)).add(3))\nx.add(y).sexpr()",result:{output:"(+ x y)",error:"",status:"z3-ran",hash:"8de9ace1926bded9a142b4e8eebde1626d151f83"},githubRepo:"Z3Prover/z3"},mdxType:"CustomCodeBlock"}),(0,n.kt)("h2",{id:"from-high-leveltestts"},"From High-level.test.ts"),(0,n.kt)("p",null,"prove ",(0,n.kt)("inlineCode",{parentName:"p"},"x = y implies g(x) = g(y)")),(0,n.kt)(i(),{input:{lang:"z3-js",highlight:"js",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"   const solver = new Z3.Solver()\n   const sort = Z3.Int.sort();\n   const x = Z3.Int.const('x');\n   const y = Z3.Int.const('y');\n   const g = Z3.Function.declare('g', sort, sort);\n   const conjecture = Z3.Implies(x.eq(y), g.call(x).eq(g.call(y)));\n   solver.add(Z3.Not(conjecture));\n   await solver.check()",result:{output:"unsat",error:"",status:"z3-ran",hash:"fd178e550fb5faead247d58c2e8caba7890b9f85"},githubRepo:"Z3Prover/z3"},mdxType:"CustomCodeBlock"}),(0,n.kt)("p",null,"disprove ",(0,n.kt)("inlineCode",{parentName:"p"},"x = y implies g(g(x)) = g(y)")),(0,n.kt)(i(),{input:{lang:"z3-js",highlight:"js",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"    const solver = new Z3.Solver();\n\n    const sort = Z3.Int.sort();\n    const x = Z3.Int.const('x');\n    const y = Z3.Int.const('y');\n    const g = Z3.Function.declare('g', sort, sort);\n    const conjecture = Z3.Implies(x.eq(y), g.call(g.call(x)).eq(g.call(y)));\n    solver.add(Z3.Not(conjecture));\n    await solver.check()",result:{output:"sat",error:"",status:"z3-ran",hash:"3ab276a5f5feed20ce6cd044ff50c654a1be88a2"},githubRepo:"Z3Prover/z3"},mdxType:"CustomCodeBlock"}))}p.isMDXComponent=!0}}]);