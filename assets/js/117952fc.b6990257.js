"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[643],{8647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(3117),s=(n(7294),n(3905)),i=n(7689);const r={title:"Basics"},o=void 0,c={unversionedId:"guide/Arithmetic/Basics",id:"guide/Arithmetic/Basics",title:"Basics",description:"Z3 has builtin support for integer and real constants. This two types should not be confused with machine integers (32-bit or 64-bit) and floating point numbers. These two types (sorts) represent the mathematical integers and reals. The command declare-const is used to declare integer and real constants.",source:"@site/docs/01 - guide/05 - Arithmetic/01 - Basics.md",sourceDirName:"01 - guide/05 - Arithmetic",slug:"/guide/Arithmetic/Basics",permalink:"/z3guide/docs/guide/Arithmetic/Basics",draft:!1,editUrl:"https://github.com/microsoft/z3guide/tree/main/website/docs/01 - guide/05 - Arithmetic/01 - Basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Basics"},sidebar:"tutorialSidebar",previous:{title:"Arithmetic",permalink:"/z3guide/docs/category/arithmetic"},next:{title:"Nonlinear Arithmetic",permalink:"/z3guide/docs/guide/Arithmetic/nonlinear-arithmetic"}},d={},l=[],u={toc:l};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Z3 has builtin support for integer and real constants. This two types should not be confused with machine integers (32-bit or 64-bit) and floating point numbers. These two types (sorts) represent the mathematical integers and reals. The command declare-const is used to declare integer and real constants."),(0,s.kt)(i.Z,{input:{code:"(declare-const a Int)\n(declare-const b Int)\n(declare-const c Int)\n(declare-const d Real)\n(declare-const e Real)",result:{output:"",error:"",status:"z3-ran",hash:"001f4d2067555373649f313d56ee7e311982319a"}},mdxType:"Z3CodeBlock"}),(0,s.kt)("p",null,"After constants are declared, the user can assert.smt formulas containing these constants. The formulas contain arithmetic operators such as +, -, , and so on. The command check-sat will instruct Z3 to try to find an interpretation for the declared constants that makes all formulas true. The interpretation is basically assigning a number to each constant. If such interpretation exists, we say it is a model for the asserted formulas. The command get-model displays the model built by Z3."),(0,s.kt)(i.Z,{input:{code:"(declare-const a Int)\n(declare-const b Int)\n(declare-const c Int)\n(declare-const d Real)\n(declare-const e Real)\n(assert (< a (+ b 2)))\n(assert (= a (+ (* 2 c) 10)))\n(assert (= (+ c b) 1000))\n(assert (= d e))\n(check-sat)\n(get-model)",result:{output:"sat\n(\n  (define-fun b () Int\n    670)\n  (define-fun e () Real\n    0.0)\n  (define-fun d () Real\n    0.0)\n  (define-fun a () Int\n    670)\n  (define-fun c () Int\n    330)\n)\n",error:"",status:"z3-ran",hash:"f12f2adfecbc35e62abde506dee3302b6f535dbb"}},mdxType:"Z3CodeBlock"}),(0,s.kt)("p",null,"Real constants should contain a decimal point. Unlike most programming languages, Z3 will not convert automatically integers into reals and vice-versa. The function to-real can be used to convert an integer expression into a real one."),(0,s.kt)(i.Z,{input:{code:"(declare-const a Int)\n(declare-const b Int)\n(declare-const c Int)\n(declare-const d Real)\n(declare-const e Real)\n(assert (< e (+ (to_real (+ a b)) 2.0)))\n(assert (= d (+ (to_real c) 0.5)))\n(assert (< a b))\n(check-sat)\n(get-model)",result:{output:"sat\n(\n  (define-fun e () Real\n    2.0)\n  (define-fun b () Int\n    1)\n  (define-fun a () Int\n    0)\n  (define-fun c () Int\n    0)\n  (define-fun d () Real\n    (/ 1.0 2.0))\n)\n",error:"",status:"z3-ran",hash:"73a4feec3eb9ef57dac67b1f329a8860e1eafabf"}},mdxType:"Z3CodeBlock"}))}m.isMDXComponent=!0}}]);