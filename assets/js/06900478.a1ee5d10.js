"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[606],{3623:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>f,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=n(3117),i=(n(7294),n(3905)),s=n(7689);const a={title:"Soft Constraints",sidebar_position:4},r=void 0,c={unversionedId:"optimization/softconstraints",id:"optimization/softconstraints",title:"Soft Constraints",description:"The (assert-soft formula :weight numeral) command asserts a weighted soft constraint. The weight must be a positive natural number, but is optional. If omitted, the weight is set to 1.",source:"@site/docs/optimization/04 - softconstraints.md",sourceDirName:"optimization",slug:"/optimization/softconstraints",permalink:"/rise4fun/docs/optimization/softconstraints",draft:!1,editUrl:"https://github.com/microsoft/rise4fun/tree/main/website/docs/optimization/04 - softconstraints.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Soft Constraints",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Arithmetical Optimization",permalink:"/rise4fun/docs/optimization/arithmeticaloptimization"},next:{title:"Combining Objectives",permalink:"/rise4fun/docs/optimization/combiningobjectives"}},f={},l=[],d={toc:l};function u(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The (assert-soft formula :weight numeral) command asserts a weighted soft constraint. The weight must be a positive natural number, but is optional. If omitted, the weight is set to 1."),(0,i.kt)(s.Z,{input:{code:"(declare-const x Int)\n(declare-const y Int)\n(define-fun a1 () Bool (> x 0))\n(define-fun a2 () Bool (< x y))\n(define-fun a3 () Bool (<= (+ y x) 0))\n(assert (= a3 a1))\n(assert (or a3 a2))\n(assert-soft a3         :weight 3)\n(assert-soft (not a3)   :weight 5) \n(assert-soft (not a1)   :weight 10)\n(assert-soft (not a2)   :weight 3)\n(check-sat)\n(get-model)\n(get-objectives)\n(eval a1)\n(eval a2)\n(eval a3)",result:{output:"sat\n(\n  (define-fun y () Int\n    1)\n  (define-fun x () Int\n    0)\n  (define-fun a3 () Bool\n    (<= (+ y x) 0))\n  (define-fun a2 () Bool\n    (< x y))\n  (define-fun a1 () Bool\n    (> x 0))\n)\n(objectives\n ( 6)\n)\nfalse\ntrue\nfalse\n",error:"",status:"z3-ran",hash:"a1eabd265b7d20c2569cbb25ac9929c445f1ee09"}},mdxType:"Z3CodeBlock"}),(0,i.kt)("p",null,"Floating point and integer weights can be mixed; internally weights are converted into rational numbers."),(0,i.kt)(s.Z,{input:{code:"(declare-const a1 Bool)\n(declare-const a2 Bool)\n(declare-const a3 Bool)\n(assert-soft a1 :weight 0.1)\n(assert-soft a2 :weight 1.0)\n(assert-soft a3 :weight  1)\n(assert-soft (or (not a1) (not a2)) :weight 3.2)\n(check-sat)\n(get-objectives)\n(get-model)",result:{output:"sat\n(objectives\n ( (/ 1.0 10.0))\n)\n(\n  (define-fun a3 () Bool\n    true)\n  (define-fun a1 () Bool\n    false)\n  (define-fun a2 () Bool\n    true)\n)\n",error:"",status:"z3-ran",hash:"dcf118512b4c19eb43c93fbde1928af4826ebbe2"}},mdxType:"Z3CodeBlock"}))}u.isMDXComponent=!0}}]);